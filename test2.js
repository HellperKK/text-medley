// Generated by Haxe 4.2.0
(function ($global) { "use strict";
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Testb = function() { };
Testb.__name__ = true;
Testb.main = function() {
	console.log("Testb.hx:3:",Testc.main());
};
var Testc = function() { };
Testc.__name__ = true;
Testc.main = function() {
	var i = Math.floor(Math.random());
	if(i == 0) {
		return Testc.count("0");
	}
	return "";
};
Testc.count = function(value) {
	var i = Math.floor(Math.random() * 6);
	if(i == 0) {
		return value + ", " + Testc.count(textMedley_MacroDefinitions.plus(value,"1"));
	}
	if(i == 1) {
		return value + ", " + Testc.count(textMedley_MacroDefinitions.plus(value,"1"));
	}
	if(i == 2) {
		return value + ", " + Testc.count(textMedley_MacroDefinitions.plus(value,"1"));
	}
	if(i == 3) {
		return value + ", " + Testc.count(textMedley_MacroDefinitions.plus(value,"1"));
	}
	if(i == 4) {
		return value + ", " + Testc.count(textMedley_MacroDefinitions.plus(value,"1"));
	}
	if(i == 5) {
		return "end";
	}
	return "";
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var textMedley_MacroDefinitions = function() { };
textMedley_MacroDefinitions.__name__ = true;
textMedley_MacroDefinitions.condition = function(cond,ifTrue,ifFalse) {
	if(parseFloat(cond) != 0 && cond != "") {
		return ifTrue;
	} else {
		return ifFalse;
	}
};
textMedley_MacroDefinitions.plus = function(num,numBis) {
	return Std.string(parseFloat(num) + parseFloat(numBis));
};
textMedley_MacroDefinitions.minus = function(num,numBis) {
	return Std.string(parseFloat(num) - parseFloat(numBis));
};
textMedley_MacroDefinitions.times = function(num,numBis) {
	return Std.string(parseFloat(num) * parseFloat(numBis));
};
textMedley_MacroDefinitions.divide = function(num,numBis) {
	return Std.string(parseFloat(num) / parseFloat(numBis));
};
textMedley_MacroDefinitions.power = function(num,numBis) {
	return Std.string(Math.pow(parseFloat(num),parseFloat(numBis)));
};
textMedley_MacroDefinitions.modulo = function(num,numBis) {
	return Std.string(parseFloat(num) % parseFloat(numBis));
};
textMedley_MacroDefinitions.floor = function(num) {
	return Std.string(Math.floor(parseFloat(num)));
};
textMedley_MacroDefinitions.ceil = function(num) {
	return Std.string(Math.ceil(parseFloat(num)));
};
textMedley_MacroDefinitions.clamp = function(num,min,max) {
	var res = Math.min(parseFloat(max),Math.max(parseFloat(min),parseFloat(num)));
	if(res == null) {
		return "null";
	} else {
		return "" + res;
	}
};
textMedley_MacroDefinitions.min = function(num,numb) {
	var res = Math.min(parseFloat(num),parseFloat(numb));
	if(res == null) {
		return "null";
	} else {
		return "" + res;
	}
};
textMedley_MacroDefinitions.max = function(num,numb) {
	var res = Math.max(parseFloat(num),parseFloat(numb));
	if(res == null) {
		return "null";
	} else {
		return "" + res;
	}
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Testb.main();
})({});
