[{
	access: [APublic, AStatic]
	doc: generated by text-meldey macro
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(Math))
								pos: #pos
							}, floor)
							pos: #pos
						}, [{
							expr: EBinop(OpMult, {
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(Math))
										pos: #pos
									}, random)
									pos: #pos
								}, [])
								pos: #pos
							}, {
								expr: EConst(CInt(4))
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}
					isFinal: false
					meta: []
					name: i
					type: null
				}])
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(0))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EConst(CString(martin, DoubleQuotes))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(1))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EConst(CString(jeanne, DoubleQuotes))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(2))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EConst(CString(paul, DoubleQuotes))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(3))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EConst(CString(world, DoubleQuotes))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CString(, DoubleQuotes))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: name
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: generated by text-meldey macro
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(Math))
								pos: #pos
							}, floor)
							pos: #pos
						}, [{
							expr: EBinop(OpMult, {
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(Math))
										pos: #pos
									}, random)
									pos: #pos
								}, [])
								pos: #pos
							}, {
								expr: EConst(CInt(3))
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}
					isFinal: false
					meta: []
					name: i
					type: null
				}])
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(0))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EBinop(OpAdd, {
								expr: EConst(CString(hello my name is , DoubleQuotes))
								pos: #pos
							}, {
								expr: null <- expected value
								pos: null <- expected value
							})
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(1))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EBinop(OpAdd, {
								expr: EConst(CString(goodbye , DoubleQuotes))
								pos: #pos
							}, {
								expr: null <- expected value
								pos: null <- expected value
							})
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(2))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EConst(CString(woops, I don't know what to say, DoubleQuotes))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CString(, DoubleQuotes))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: main
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: generated by text-meldey macro
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: null
					isFinal: false
					meta: []
					name: name
					type: null
				}])
				pos: #pos
			}, {
				expr: EVars([{
					expr: {
						expr: ECall({
							expr: EField({
								expr: EConst(CIdent(Math))
								pos: #pos
							}, floor)
							pos: #pos
						}, [{
							expr: EBinop(OpMult, {
								expr: ECall({
									expr: EField({
										expr: EConst(CIdent(Math))
										pos: #pos
									}, random)
									pos: #pos
								}, [])
								pos: #pos
							}, {
								expr: EConst(CInt(3))
								pos: #pos
							})
							pos: #pos
						}])
						pos: #pos
					}
					isFinal: false
					meta: []
					name: i
					type: null
				}])
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(0))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EBinop(OpAdd, {
								expr: EBinop(OpAdd, {
									expr: EConst(CString(my best pal whose name is , DoubleQuotes))
									pos: #pos
								}, {
									expr: EConst(CIdent(name))
									pos: #pos
								})
								pos: #pos
							}, {
								expr: EConst(CString(my best pal whose name is , DoubleQuotes))
								pos: #pos
							})
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(1))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EBinop(OpAdd, {
								expr: EConst(CString(my lover , DoubleQuotes))
								pos: #pos
							}, {
								expr: null <- expected value
								pos: null <- expected value
							})
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EIf({
					expr: EBinop(OpEq, {
						expr: EConst(CIdent(i))
						pos: #pos
					}, {
						expr: EConst(CInt(2))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EReturn({
							expr: EConst(CString(my... well I don't know you I guess ?, DoubleQuotes))
							pos: #pos
						})
						pos: #pos
					}])
					pos: #pos
				}, null)
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CString(, DoubleQuotes))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: friend
	pos: #pos
}]
line 195: expected value
line 196: expected value
line 222: expected value
line 223: expected value
line 366: expected value
line 367: expected value